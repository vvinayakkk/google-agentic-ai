"""
Test AI-integrated PDF generation
"""

import sys
import os
from datetime import datetime

# Add the backend directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_ai_pdf_generation():
    """Test PDF generation with AI responses included"""
    
    print("ЁЯдЦ Testing AI-Integrated PDF Generation")
    print("=" * 50)
    
    try:
        from services.document_generation import document_service
        
        # Sample farmer data with AI assistance
        farmer_data_with_ai = {
            "farmer_name": "рд░рд╛рдЬреЗрд╢ рдХреБрдорд╛рд░ рдкрд╛рдЯреАрд▓",
            "aadhaar_number": "1234-5678-9012",
            "contact_number": "+91-9876543210",
            "address": "рдЧрд╛рд╡: рд╢рд┐рд░рдкреВрд░, рдЬрд┐рд▓реНрд╣рд╛: рдзреБрд│реЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░",
            "loan_amount": "тВ╣3,00,000",
            "loan_purpose": "рдЦрд░реАрдк рд╣рдВрдЧрд╛рдорд╛рд╕рд╛рдареА рдпрдВрддреНрд░рд╕рд╛рдордЧреНрд░реА рдЦрд░реЗрджреА",
            "scheme_name": "рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзреА (PM-KISAN)",
            "land_details": {
                "survey_number": "123/1",
                "area": "7 рдПрдХрд░",
                "soil_type": "рдХрд╛рд│реА рдорд┐рдЯреНрдЯреА"
            },
            # ЁЯдЦ AI assistance data
            "ai_assistance": {
                "user_question": "рдорд▓рд╛ PM-KISAN рдпреЛрдЬрдиреЗрд╕рд╛рдареА рдЕрд░реНрдЬ рдХрд░рд╛рдпрдЪрд╛ рдЖрд╣реЗ. рдпрд╛рдЪреА рдкрд╛рддреНрд░рддрд╛ рдХрд╛рдп рдЖрд╣реЗ рдЖрдгрд┐ рдХрд╕реЗ рдЕрд░реНрдЬ рдХрд░рд╛рд╡рд╛?",
                "ai_response": "рдирдорд╕реНрдХрд╛рд░ рд╢реЗрддрдХрд░реА рднрд╛рдК! PM-KISAN рдпреЛрдЬрдиреЗрд╕рд╛рдареА рдЕрд░реНрдЬ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рддреБрдореНрд╣реА рдЦрд╛рд▓реАрд▓ рдкрд╛рддреНрд░рддрд╛ рдкреВрд░реНрдг рдХрд░рд╛рд╡реА:\n\n1. рднрд╛рд░рддреАрдп рдирд╛рдЧрд░рд┐рдХ рдЕрд╕рд╛рд╡реЗ\n2. 2 рд╣реЗрдХреНрдЯрд░ рдкрд░реНрдпрдВрдд рд╢реЗрддрдЬрдореАрди рдЕрд╕рд╛рд╡реА\n3. рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб, рдЬрдореАрди рдХрд╛рдЧрджрдкрддреНрд░реЗ рдЖрдгрд┐ рдмрдБрдХ рдЦрд╛рддреЗ рдЕрд╕рд╛рд╡реЗ\n\nрдЕрд░реНрдЬ рдХрд░рдгреНрдпрд╛рдЪреА рдкреНрд░рдХреНрд░рд┐рдпрд╛:\nтАв PM-KISAN рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░ рдЬрд╛ (pmkisan.gov.in)\nтАв 'Farmer Registration' рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛\nтАв рдЖрдзрд╛рд░ рдирдВрдмрд░ рдЯрд╛рдХрд╛\nтАв рд╕рд░реНрд╡ рдорд╛рд╣рд┐рддреА рднрд░рд╛\nтАв рдХрд╛рдЧрджрдкрддреНрд░реЗ рдЕрдкрд▓реЛрдб рдХрд░рд╛\nтАв рд╕рдмрдорд┐рдЯ рдХрд░рд╛\n\nрдпреЛрдЬрдиреЗрдд рд╡рд░реНрд╖рд╛рддреВрди тВ╣6000 рддреАрди рд╣рдкреНрддреНрдпрд╛рдд рдорд┐рд│рддрд╛рдд. рдкрд╣рд┐рд▓рд╛ рд╣рдкреНрддрд╛ рдПрдкреНрд░рд┐рд▓-рдЬреБрд▓реИ, рджреБрд╕рд░рд╛ рдСрдЧрд╕реНрдЯ-рдиреЛрд╡реНрд╣реЗрдВрдмрд░ рдЖрдгрд┐ рддрд┐рд╕рд░рд╛ рдбрд┐рд╕реЗрдВрдмрд░-рдорд╛рд░реНрдЪ рдордзреНрдпреЗ рдпреЗрддреЛ.",
                "relevant_schemes": ["PM-KISAN", "PM Fasal Bima Yojana", "KCC Scheme"],
                "consultation_date": "25/07/2025",
                "consultation_time": "07:00 PM",
                "ai_model": "Gemini 2.5 Flash"
            }
        }
        
        print("ЁЯУЛ Testing loan application with AI assistance...")
        
        # Generate PDF with AI content
        result = document_service.generate_document(
            document_type="loan_application",
            farmer_data=farmer_data_with_ai,
            format_type="pdf"
        )
        
        if result["success"]:
            print(f"тЬЕ AI-integrated PDF generated successfully!")
            print(f"   ЁЯУБ File: {result['filename']}")
            print(f"   ЁЯУН Path: {result['file_path']}")
            print(f"   ЁЯУК File size: {os.path.getsize(result['file_path'])} bytes")
            print(f"   ЁЯХТ Generated at: {result['generated_at']}")
            
            return result
        else:
            print(f"тЭМ PDF generation failed: {result.get('error', 'Unknown error')}")
            return None
            
    except Exception as e:
        print(f"тЭМ Test failed: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_chat_session_pdf():
    """Test PDF generation with multiple AI chat exchanges"""
    
    print(f"\nЁЯТм Testing Chat Session PDF Generation")
    print("=" * 50)
    
    try:
        from services.document_generation import document_service
        
        # Sample farmer data with AI chat session
        farmer_data_with_chat = {
            "farmer_name": "рд╕реБрдиреАрддрд╛ рджреЗрд╡реА рд╢рд░реНрдорд╛",
            "purpose": "рдХреГрд╖реА рд╕рд▓реНрд▓рд╛рдорд╕рд▓рдд рдЖрдгрд┐ рдпреЛрдЬрдирд╛ рдорд╛рд╣рд┐рддреА",
            "scheme_name": "AI-Recommended Schemes",
            # ЁЯТм AI chat session data
            "ai_chat_session": {
                "total_questions": 3,
                "conversation_summary": [
                    {
                        "question": "рдорд▓рд╛ рдКрд╕ рд▓рд╛рдЧрд╡рдбреАрд╕рд╛рдареА рдХрд░реНрдЬ рд╣рд╡реЗ рдЖрд╣реЗ. рдХреЛрдгрддреА рдпреЛрдЬрдирд╛ рдЪрд╛рдВрдЧрд▓реА?",
                        "ai_response": "рдКрд╕ рд▓рд╛рдЧрд╡рдбреАрд╕рд╛рдареА рддреБрдореНрд╣реА KCC (рдХрд┐рд╕рд╛рди рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб) рдпреЛрдЬрдиреЗрдЪрд╛ рдлрд╛рдпрджрд╛ рдШреЗрдК рд╢рдХрддрд╛. рдпрд╛рджреНрд╡рд╛рд░реЗ 4% рд╡реНрдпрд╛рдЬрджрд░рд╛рдиреЗ рдХрд░реНрдЬ рдорд┐рд│рддреЗ. PM-KISAN рдпреЛрдЬрдиреЗрддреВрдирд╣реА рд╡рд░реНрд╖реА тВ╣6000 рдорд┐рд│рддрд╛рдд.",
                        "relevant_schemes": ["KCC Scheme", "PM-KISAN"]
                    },
                    {
                        "question": "рдкреАрдХ рд╡рд┐рдореНрдпрд╛рд╕рд╛рдареА рдХрд╛рдп рдХрд░рд╛рд╡реЗ?",
                        "ai_response": "PMFBY (рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛) рдЕрдВрддрд░реНрдЧрдд рдкреАрдХ рд╡рд┐рдорд╛ рдХрд░рд╡рд╛. рдКрд╕рд╛рд╕рд╛рдареА рдлрдХреНрдд 2% рдкреНрд░реАрдорд┐рдпрдо рднрд░рд╛рд╡реЗ рд▓рд╛рдЧрддреЗ. рдиреИрд╕рд░реНрдЧрд┐рдХ рдЖрдкрддреНрддреАрдореБрд│реЗ рдкреАрдХ рдЦрд░рд╛рдм рдЭрд╛рд▓реНрдпрд╛рд╕ рднрд░рдкрд╛рдИ рдорд┐рд│рддреЗ.",
                        "relevant_schemes": ["PMFBY", "Crop Insurance"]
                    },
                    {
                        "question": "рд╕рд░рдХрд╛рд░рдХрдбреВрди рдЦрдд рдХрд╕реЗ рдорд┐рд│реЗрд▓?",
                        "ai_response": "DBT (Direct Benefit Transfer) рджреНрд╡рд╛рд░реЗ рдЦрдд рд╕рдмрд╕рд┐рдбреА рдереЗрдЯ рддреБрдордЪреНрдпрд╛ рдЦрд╛рддреНрдпрд╛рдд рдпреЗрддреЗ. рдирдЬреАрдХрдЪреНрдпрд╛ рдЦрдд рджреБрдХрд╛рдирд╛рдд рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб рдШреЗрдКрди рдЬрд╛. PM рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзреА рдпреЛрдЬрдиреЗрдд рдиреЛрдВрджрдгреА рдЭрд╛рд▓реА рдЕрд╕реЗрд▓ рддрд░ рдЦрдд рд╕рд╣рдЬ рдорд┐рд│реЗрд▓.",
                        "relevant_schemes": ["DBT Fertilizer", "PM-KISAN"]
                    }
                ],
                "session_date": "25/07/2025",
                "session_time": "07:15 PM",
                "ai_model": "Gemini 2.5 Flash",
                "note": "рдпрд╛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╛рдд AI рджреНрд╡рд╛рд░реЗ рджрд┐рд▓реЗрд▓реА рдорд╛рд╣рд┐рддреА рд╕рдВрджрд░реНрднрд╛рд╕рд╛рдареА рдЖрд╣реЗ. рдЕрдЪреВрдХ рдорд╛рд╣рд┐рддреАрд╕рд╛рдареА рд╕рдВрдмрдВрдзрд┐рдд рдХрд╛рд░реНрдпрд╛рд▓рдпрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рд╕рд╛рдзрд╛."
            }
        }
        
        print("ЁЯУЛ Testing general application with AI chat session...")
        
        # Generate PDF with chat session content
        result = document_service.generate_document(
            document_type="general_application",
            farmer_data=farmer_data_with_chat,
            format_type="pdf"
        )
        
        if result["success"]:
            print(f"тЬЕ Chat session PDF generated successfully!")
            print(f"   ЁЯУБ File: {result['filename']}")
            print(f"   ЁЯУН Path: {result['file_path']}")
            print(f"   ЁЯУК File size: {os.path.getsize(result['file_path'])} bytes")
            print(f"   ЁЯТм Contains 3 AI conversations")
            
            return result
        else:
            print(f"тЭМ PDF generation failed: {result.get('error', 'Unknown error')}")
            return None
            
    except Exception as e:
        print(f"тЭМ Test failed: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("ЁЯЪА Starting AI-Integrated PDF Generation Tests...\n")
    
    # Test 1: Single AI assistance
    result1 = test_ai_pdf_generation()
    
    # Test 2: Multiple AI chat exchanges
    result2 = test_chat_session_pdf()
    
    # Summary
    print(f"\nЁЯОп TEST SUMMARY")
    print("=" * 50)
    
    success_count = 0
    if result1:
        success_count += 1
        print("тЬЕ AI Assistance PDF: SUCCESS")
    else:
        print("тЭМ AI Assistance PDF: FAILED")
    
    if result2:
        success_count += 1
        print("тЬЕ Chat Session PDF: SUCCESS")
    else:
        print("тЭМ Chat Session PDF: FAILED")
    
    print(f"\nЁЯПЖ Results: {success_count}/2 tests passed")
    
    if success_count == 2:
        print("\nЁЯОЙ AI-Integrated PDF Generation is WORKING PERFECTLY!")
        print("   Gemini responses are now embedded in PDF documents!")
        print("   Farmers can get PDFs with AI assistance included!")
    else:
        print("\nтЪая╕П  Some tests failed. Check the error messages above.")
